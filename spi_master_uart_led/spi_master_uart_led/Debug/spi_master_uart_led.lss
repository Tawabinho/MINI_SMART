
spi_master_uart_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800116  00800116  000007a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a7  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096f  00000000  00000000  00002097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9f  00000000  00000000  00002a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b69  00000000  00000000  00003afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	06 01       	movw	r0, r12
  56:	43 01       	movw	r8, r6
  58:	81 01       	movw	r16, r2
  5a:	bf 01       	movw	r22, r30
  5c:	fd 01       	movw	r30, r26
  5e:	3b 02       	muls	r19, r27
  60:	79 02       	muls	r23, r25
  62:	b7 02       	muls	r27, r23

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e5       	ldi	r30, 0x5A	; 90
  78:	f6 e0       	ldi	r31, 0x06	; 6
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 31       	cpi	r26, 0x16	; 22
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	a6 e1       	ldi	r26, 0x16	; 22
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a7 31       	cpi	r26, 0x17	; 23
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  9a:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <lcd_int__>:
#include "lcd_config__.h"
#include "lcd__.h"
#include <util/delay.h>
#include <avr/io.h>
void lcd_int__(){
	DDRA=0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
	clear_bit__(PORTA,RW);
  a6:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	9c e7       	ldi	r25, 0x7C	; 124
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_int__+0xa>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_int__+0x10>
  b2:	00 00       	nop
	_delay_ms(8);
	lcd_command__(0x33);
  b4:	83 e3       	ldi	r24, 0x33	; 51
  b6:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
	lcd_command__(0x32);
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
	lcd_command__(0x28);
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
	lcd_command__(0x0c);
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
	lcd_command__(0x06);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
	lcd_command__(0x01);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
  d8:	08 95       	ret

000000da <lcd_command__>:
#define F_CPU 16000000
#include "lcd__.h"
#include <util/delay.h>
#include <avr/io.h>
void lcd_command__(uint_8__ cmd){
	PORTA=(PORTA & 0x0F)|(cmd & 0xF0);
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	92 2b       	or	r25, r18
  e4:	9b bb       	out	0x1b, r25	; 27
	clear_bit__(PORTA,RS);
  e6:	d9 98       	cbi	0x1b, 1	; 27
	set_bit__(PORTA,E);
  e8:	db 9a       	sbi	0x1b, 3	; 27
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_command__+0x14>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_command__+0x1a>
  f4:	00 00       	nop
	_delay_ms(2);
	clear_bit__(PORTA,E);
  f6:	db 98       	cbi	0x1b, 3	; 27
  f8:	ef e3       	ldi	r30, 0x3F	; 63
  fa:	ff e1       	ldi	r31, 0x1F	; 31
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_command__+0x22>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_command__+0x28>
 102:	00 00       	nop
	_delay_ms(2);
	PORTA=(PORTA & 0x0F)|(cmd << 4);
 104:	2b b3       	in	r18, 0x1b	; 27
 106:	2f 70       	andi	r18, 0x0F	; 15
 108:	f0 e1       	ldi	r31, 0x10	; 16
 10a:	8f 9f       	mul	r24, r31
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	82 2b       	or	r24, r18
 112:	8b bb       	out	0x1b, r24	; 27
	set_bit__(PORTA,E);
 114:	db 9a       	sbi	0x1b, 3	; 27
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9f e1       	ldi	r25, 0x1F	; 31
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_command__+0x40>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_command__+0x46>
 120:	00 00       	nop
	_delay_ms(2);
	clear_bit__(PORTA,E);
 122:	db 98       	cbi	0x1b, 3	; 27
 124:	ef e3       	ldi	r30, 0x3F	; 63
 126:	ff e1       	ldi	r31, 0x1F	; 31
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_command__+0x4e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_command__+0x54>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_write__>:
	_delay_ms(2);
}

void lcd_write__(uint_8__ data){
	PORTA=(PORTA & 0x0F)|(data & 0xF0);
 132:	9b b3       	in	r25, 0x1b	; 27
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	28 2f       	mov	r18, r24
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	92 2b       	or	r25, r18
 13c:	9b bb       	out	0x1b, r25	; 27
	set_bit__(PORTA,RS);
 13e:	d9 9a       	sbi	0x1b, 1	; 27
	set_bit__(PORTA,E);
 140:	db 9a       	sbi	0x1b, 3	; 27
 142:	ef e3       	ldi	r30, 0x3F	; 63
 144:	ff e1       	ldi	r31, 0x1F	; 31
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_write__+0x14>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_write__+0x1a>
 14c:	00 00       	nop
	_delay_ms(2);
	clear_bit__(PORTA,E);
 14e:	db 98       	cbi	0x1b, 3	; 27
 150:	ef e3       	ldi	r30, 0x3F	; 63
 152:	ff e1       	ldi	r31, 0x1F	; 31
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_write__+0x22>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_write__+0x28>
 15a:	00 00       	nop
	_delay_ms(2);
	PORTA=(PORTA & 0x0F)|(data << 4);
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	2f 70       	andi	r18, 0x0F	; 15
 160:	f0 e1       	ldi	r31, 0x10	; 16
 162:	8f 9f       	mul	r24, r31
 164:	c0 01       	movw	r24, r0
 166:	11 24       	eor	r1, r1
 168:	82 2b       	or	r24, r18
 16a:	8b bb       	out	0x1b, r24	; 27
	set_bit__(PORTA,E);
 16c:	db 9a       	sbi	0x1b, 3	; 27
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9f e1       	ldi	r25, 0x1F	; 31
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_write__+0x40>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_write__+0x46>
 178:	00 00       	nop
	_delay_ms(2);
	clear_bit__(PORTA,E);
 17a:	db 98       	cbi	0x1b, 3	; 27
 17c:	ef e3       	ldi	r30, 0x3F	; 63
 17e:	ff e1       	ldi	r31, 0x1F	; 31
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_write__+0x4e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_write__+0x54>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <lcd_string__>:
	_delay_ms(2);
}

void lcd_string__(int_8__ *str){
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	while(*str !='\0')
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	31 f0       	breq	.+12     	; 0x1a2 <lcd_string__+0x18>
 196:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write__(*str);
 198:	0e 94 99 00 	call	0x132	; 0x132 <lcd_write__>
	clear_bit__(PORTA,E);
	_delay_ms(2);
}

void lcd_string__(int_8__ *str){
	while(*str !='\0')
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <lcd_string__+0xe>
	{
		lcd_write__(*str);
		str++;
	}
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <lcd_clear__>:

void lcd_clear__(){
	lcd_command__(0x01);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9f e1       	ldi	r25, 0x1F	; 31
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_clear__+0xa>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_clear__+0x10>
 1b8:	00 00       	nop
	_delay_ms(2);
	lcd_command__(0x80);
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
 1c0:	08 95       	ret

000001c2 <main>:
#include "lcd__.h"
#include "SPI_MASTER.h"
uint_8__ SPI;
int main(void)
{
	lcd_int__();
 1c2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_int__>
    UART_INT();
 1c6:	0e 94 03 03 	call	0x606	; 0x606 <UART_INT>
	SPI_MASTER_INT();
 1ca:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SPI_MASTER_INT>
	lcd_command__(0x80);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
	lcd_string__("hey smile");
 1d4:	80 e6       	ldi	r24, 0x60	; 96
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	83 ed       	ldi	r24, 0xD3	; 211
 1e0:	90 e3       	ldi	r25, 0x30	; 48
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x20>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x2a>
 1ec:	00 00       	nop
	_delay_ms(1000);
	lcd_clear__();
 1ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_clear__>
				SPI=SPI_MASTER_RECIEVE();
				disable();
				_delay_ms(100);
				if (SPI=='H')
				{
					toggle_bit__(PORTA,0);
 1f2:	c1 e0       	ldi	r28, 0x01	; 1
	_delay_ms(1000);
	lcd_clear__();
	
    while (1) 
    {
		uint_8__ rec=UART_RECIEVE();
 1f4:	0e 94 21 03 	call	0x642	; 0x642 <UART_RECIEVE>
		switch (rec){
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	fc 01       	movw	r30, r24
 1fc:	f1 97       	sbiw	r30, 0x31	; 49
 1fe:	e8 30       	cpi	r30, 0x08	; 8
 200:	f1 05       	cpc	r31, r1
 202:	c0 f7       	brcc	.-16     	; 0x1f4 <main+0x32>
 204:	e6 5d       	subi	r30, 0xD6	; 214
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	0c 94 25 03 	jmp	0x64a	; 0x64a <__tablejump2__>
			case '1':
				enable();
 20c:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 20e:	81 e3       	ldi	r24, 0x31	; 49
 210:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 214:	c3 9a       	sbi	0x18, 3	; 24
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	81 ee       	ldi	r24, 0xE1	; 225
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x5a>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x64>
 226:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("ROOM 1");
 22e:	8a e6       	ldi	r24, 0x6A	; 106
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nROOM 1\r\n");
 236:	81 e7       	ldi	r24, 0x71	; 113
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 23e:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 240:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 244:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	81 ee       	ldi	r24, 0xE1	; 225
 24e:	94 e0       	ldi	r25, 0x04	; 4
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x8e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x98>
 25a:	00 00       	nop
				_delay_ms(100);
				if (SPI=='A')
 25c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 260:	81 34       	cpi	r24, 0x41	; 65
 262:	41 f6       	brne	.-112    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 264:	8b b3       	in	r24, 0x1b	; 27
 266:	8c 27       	eor	r24, r28
 268:	8b bb       	out	0x1b, r24	; 27
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	83 ed       	ldi	r24, 0xD3	; 211
 26e:	90 e3       	ldi	r25, 0x30	; 48
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0xae>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xb8>
 27a:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nROOM 1 on\r\n");
 27c:	8c e7       	ldi	r24, 0x7C	; 124
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 284:	b7 cf       	rjmp	.-146    	; 0x1f4 <main+0x32>
				}
				break;
			case '2':
				enable();
 286:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 288:	82 e3       	ldi	r24, 0x32	; 50
 28a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 28e:	c3 9a       	sbi	0x18, 3	; 24
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	81 ee       	ldi	r24, 0xE1	; 225
 294:	94 e0       	ldi	r25, 0x04	; 4
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0xd4>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0xde>
 2a0:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("ROOM 2");
 2a8:	8a e8       	ldi	r24, 0x8A	; 138
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nROOM 2\r\n");
 2b0:	81 e9       	ldi	r24, 0x91	; 145
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 2b8:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 2ba:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 2be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 2c2:	c3 9a       	sbi	0x18, 3	; 24
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	81 ee       	ldi	r24, 0xE1	; 225
 2c8:	94 e0       	ldi	r25, 0x04	; 4
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x108>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x112>
 2d4:	00 00       	nop
				_delay_ms(100);
				if (SPI=='B')
 2d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2da:	82 34       	cpi	r24, 0x42	; 66
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <main+0x11e>
 2de:	8a cf       	rjmp	.-236    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 2e0:	8b b3       	in	r24, 0x1b	; 27
 2e2:	8c 27       	eor	r24, r28
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	83 ed       	ldi	r24, 0xD3	; 211
 2ea:	90 e3       	ldi	r25, 0x30	; 48
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x12a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x134>
 2f6:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nROOM 1 on\r\n");
 2f8:	8c e7       	ldi	r24, 0x7C	; 124
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 300:	79 cf       	rjmp	.-270    	; 0x1f4 <main+0x32>
				}
				break;
			case '3':
				enable();
 302:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 304:	83 e3       	ldi	r24, 0x33	; 51
 306:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 30a:	c3 9a       	sbi	0x18, 3	; 24
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	81 ee       	ldi	r24, 0xE1	; 225
 310:	94 e0       	ldi	r25, 0x04	; 4
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x150>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x15a>
 31c:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("ROOM 3");
 324:	8c e9       	ldi	r24, 0x9C	; 156
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nROOM 3\r\n");
 32c:	83 ea       	ldi	r24, 0xA3	; 163
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 334:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 336:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 33a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 33e:	c3 9a       	sbi	0x18, 3	; 24
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	81 ee       	ldi	r24, 0xE1	; 225
 344:	94 e0       	ldi	r25, 0x04	; 4
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x184>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x18e>
 350:	00 00       	nop
				_delay_ms(100);
				if (SPI=='C')
 352:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 356:	83 34       	cpi	r24, 0x43	; 67
 358:	09 f0       	breq	.+2      	; 0x35c <main+0x19a>
 35a:	4c cf       	rjmp	.-360    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 35c:	8b b3       	in	r24, 0x1b	; 27
 35e:	8c 27       	eor	r24, r28
 360:	8b bb       	out	0x1b, r24	; 27
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	83 ed       	ldi	r24, 0xD3	; 211
 366:	90 e3       	ldi	r25, 0x30	; 48
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x1a6>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x1b0>
 372:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nROOM 3 on\r\n");
 374:	8e ea       	ldi	r24, 0xAE	; 174
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 37c:	3b cf       	rjmp	.-394    	; 0x1f4 <main+0x32>
				}
				break;
			case '4':
				enable();
 37e:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 380:	84 e3       	ldi	r24, 0x34	; 52
 382:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 386:	c3 9a       	sbi	0x18, 3	; 24
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	81 ee       	ldi	r24, 0xE1	; 225
 38c:	94 e0       	ldi	r25, 0x04	; 4
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x1cc>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x1d6>
 398:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("MOTOR1");
 3a0:	8c eb       	ldi	r24, 0xBC	; 188
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nMOTOR1\r\n");
 3a8:	83 ec       	ldi	r24, 0xC3	; 195
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 3b0:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 3b2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 3b6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 3ba:	c3 9a       	sbi	0x18, 3	; 24
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	81 ee       	ldi	r24, 0xE1	; 225
 3c0:	94 e0       	ldi	r25, 0x04	; 4
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x200>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x20a>
 3cc:	00 00       	nop
				_delay_ms(100);
				if (SPI=='M')
 3ce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3d2:	8d 34       	cpi	r24, 0x4D	; 77
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <main+0x216>
 3d6:	0e cf       	rjmp	.-484    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 3d8:	8b b3       	in	r24, 0x1b	; 27
 3da:	8c 27       	eor	r24, r28
 3dc:	8b bb       	out	0x1b, r24	; 27
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	83 ed       	ldi	r24, 0xD3	; 211
 3e2:	90 e3       	ldi	r25, 0x30	; 48
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x222>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x22c>
 3ee:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nMOTOR1 on\r\n");
 3f0:	8e ec       	ldi	r24, 0xCE	; 206
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 3f8:	fd ce       	rjmp	.-518    	; 0x1f4 <main+0x32>
				}
				break;
			case '5':
				enable();
 3fa:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 3fc:	85 e3       	ldi	r24, 0x35	; 53
 3fe:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 402:	c3 9a       	sbi	0x18, 3	; 24
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	81 ee       	ldi	r24, 0xE1	; 225
 408:	94 e0       	ldi	r25, 0x04	; 4
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 416:	80 e8       	ldi	r24, 0x80	; 128
 418:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("ROOM 1");
 41c:	8a e6       	ldi	r24, 0x6A	; 106
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nROOM 1 \r\n");
 424:	8c ed       	ldi	r24, 0xDC	; 220
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 42c:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 42e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 432:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 436:	c3 9a       	sbi	0x18, 3	; 24
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	81 ee       	ldi	r24, 0xE1	; 225
 43c:	94 e0       	ldi	r25, 0x04	; 4
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
				_delay_ms(100);
				if (SPI=='E')
 44a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 44e:	85 34       	cpi	r24, 0x45	; 69
 450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	d0 ce       	rjmp	.-608    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 454:	8b b3       	in	r24, 0x1b	; 27
 456:	8c 27       	eor	r24, r28
 458:	8b bb       	out	0x1b, r24	; 27
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	83 ed       	ldi	r24, 0xD3	; 211
 45e:	90 e3       	ldi	r25, 0x30	; 48
 460:	21 50       	subi	r18, 0x01	; 1
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nROOM 1 off\r\n");
 46c:	88 ee       	ldi	r24, 0xE8	; 232
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 474:	bf ce       	rjmp	.-642    	; 0x1f4 <main+0x32>
				}
				break;
			case '6':
				enable();
 476:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 478:	86 e3       	ldi	r24, 0x36	; 54
 47a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 47e:	c3 9a       	sbi	0x18, 3	; 24
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	81 ee       	ldi	r24, 0xE1	; 225
 484:	94 e0       	ldi	r25, 0x04	; 4
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("ROOM 2");
 498:	8a e8       	ldi	r24, 0x8A	; 138
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nROOM 2\r\n");
 4a0:	81 e9       	ldi	r24, 0x91	; 145
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 4a8:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 4aa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 4ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 4b2:	c3 9a       	sbi	0x18, 3	; 24
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	81 ee       	ldi	r24, 0xE1	; 225
 4b8:	94 e0       	ldi	r25, 0x04	; 4
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c4:	00 00       	nop
				_delay_ms(100);
				if (SPI=='F')
 4c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 4ca:	86 34       	cpi	r24, 0x46	; 70
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ce:	92 ce       	rjmp	.-732    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 4d0:	8b b3       	in	r24, 0x1b	; 27
 4d2:	8c 27       	eor	r24, r28
 4d4:	8b bb       	out	0x1b, r24	; 27
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	83 ed       	ldi	r24, 0xD3	; 211
 4da:	90 e3       	ldi	r25, 0x30	; 48
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e6:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nROOM 1 off\r\n");
 4e8:	88 ee       	ldi	r24, 0xE8	; 232
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 4f0:	81 ce       	rjmp	.-766    	; 0x1f4 <main+0x32>
				}
				break;
			case '7':
				enable();
 4f2:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 4f4:	87 e3       	ldi	r24, 0x37	; 55
 4f6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 4fa:	c3 9a       	sbi	0x18, 3	; 24
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	81 ee       	ldi	r24, 0xE1	; 225
 500:	94 e0       	ldi	r25, 0x04	; 4
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50c:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("ROOM 3");
 514:	8c e9       	ldi	r24, 0x9C	; 156
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nROOM 3\r\n");
 51c:	83 ea       	ldi	r24, 0xA3	; 163
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 524:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 526:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 52a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 52e:	c3 9a       	sbi	0x18, 3	; 24
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	81 ee       	ldi	r24, 0xE1	; 225
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 540:	00 00       	nop
				_delay_ms(100);
				if (SPI=='G')
 542:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 546:	87 34       	cpi	r24, 0x47	; 71
 548:	09 f0       	breq	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54a:	54 ce       	rjmp	.-856    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 54c:	8b b3       	in	r24, 0x1b	; 27
 54e:	8c 27       	eor	r24, r28
 550:	8b bb       	out	0x1b, r24	; 27
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	83 ed       	ldi	r24, 0xD3	; 211
 556:	90 e3       	ldi	r25, 0x30	; 48
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 560:	00 c0       	rjmp	.+0      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 562:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nROOM 3 off\r\n");
 564:	87 ef       	ldi	r24, 0xF7	; 247
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 56c:	43 ce       	rjmp	.-890    	; 0x1f4 <main+0x32>
				}
				break;
			case '8':
				enable();
 56e:	c3 98       	cbi	0x18, 3	; 24
				SPI_MASTER_SEND(rec);
 570:	88 e3       	ldi	r24, 0x38	; 56
 572:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_MASTER_SEND>
				disable();
 576:	c3 9a       	sbi	0x18, 3	; 24
 578:	2f ef       	ldi	r18, 0xFF	; 255
 57a:	81 ee       	ldi	r24, 0xE1	; 225
 57c:	94 e0       	ldi	r25, 0x04	; 4
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 586:	00 c0       	rjmp	.+0      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 588:	00 00       	nop
				_delay_ms(100);
				lcd_command__(0x80);
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	0e 94 6d 00 	call	0xda	; 0xda <lcd_command__>
				lcd_string__("MOTOR1");
 590:	8c eb       	ldi	r24, 0xBC	; 188
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string__>
				UART_SEND_STRING("\r\nMOTOR1\r\n");
 598:	83 ec       	ldi	r24, 0xC3	; 195
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
				enable();
 5a0:	c3 98       	cbi	0x18, 3	; 24
				SPI=SPI_MASTER_RECIEVE();
 5a2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_MASTER_RECIEVE>
 5a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
				disable();
 5aa:	c3 9a       	sbi	0x18, 3	; 24
 5ac:	2f ef       	ldi	r18, 0xFF	; 255
 5ae:	81 ee       	ldi	r24, 0xE1	; 225
 5b0:	94 e0       	ldi	r25, 0x04	; 4
 5b2:	21 50       	subi	r18, 0x01	; 1
 5b4:	80 40       	sbci	r24, 0x00	; 0
 5b6:	90 40       	sbci	r25, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5bc:	00 00       	nop
				_delay_ms(100);
				if (SPI=='H')
 5be:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 5c2:	88 34       	cpi	r24, 0x48	; 72
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c6:	16 ce       	rjmp	.-980    	; 0x1f4 <main+0x32>
				{
					toggle_bit__(PORTA,0);
 5c8:	8b b3       	in	r24, 0x1b	; 27
 5ca:	8c 27       	eor	r24, r28
 5cc:	8b bb       	out	0x1b, r24	; 27
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	83 ed       	ldi	r24, 0xD3	; 211
 5d2:	90 e3       	ldi	r25, 0x30	; 48
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5de:	00 00       	nop
					_delay_ms(1000);
					UART_SEND_STRING("\r\nMOTOR1 off\r\n");
 5e0:	86 e0       	ldi	r24, 0x06	; 6
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 12 03 	call	0x624	; 0x624 <UART_SEND_STRING>
 5e8:	05 ce       	rjmp	.-1014   	; 0x1f4 <main+0x32>

000005ea <SPI_MASTER_INT>:
 *  Author: Ahmed EL-Tawab
 */ 
#include "SPI_MASTER.h"
#include <avr/io.h>
void SPI_MASTER_INT(){
	SPCR=0x51;
 5ea:	81 e5       	ldi	r24, 0x51	; 81
 5ec:	8d b9       	out	0x0d, r24	; 13
	DDRB|=(1<<MOSI)|(1<<sck)|(1<<CS);	
 5ee:	87 b3       	in	r24, 0x17	; 23
 5f0:	88 6a       	ori	r24, 0xA8	; 168
 5f2:	87 bb       	out	0x17, r24	; 23
 5f4:	08 95       	ret

000005f6 <SPI_MASTER_SEND>:
}
void SPI_MASTER_SEND(uint_8__ data){
	SPDR=data;
 5f6:	8f b9       	out	0x0f, r24	; 15
	while((get_bit__(SPSR,SPIF))==0);
 5f8:	77 9b       	sbis	0x0e, 7	; 14
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <SPI_MASTER_SEND+0x2>
}
 5fc:	08 95       	ret

000005fe <SPI_MASTER_RECIEVE>:
uint_8__ SPI_MASTER_RECIEVE(void){
	while((get_bit__(SPSR,SPIF))==0);
 5fe:	77 9b       	sbis	0x0e, 7	; 14
 600:	fe cf       	rjmp	.-4      	; 0x5fe <SPI_MASTER_RECIEVE>
	return SPDR;
 602:	8f b1       	in	r24, 0x0f	; 15
 604:	08 95       	ret

00000606 <UART_INT>:
 *  Author: Ahmed EL-Tawab
 */ 
#include "UART.h"
#include <avr/io.h>
void UART_INT(){
	UBRRL=103;
 606:	87 e6       	ldi	r24, 0x67	; 103
 608:	89 b9       	out	0x09, r24	; 9
	set_bit__(UCSRB,TXEN);
 60a:	53 9a       	sbi	0x0a, 3	; 10
	set_bit__(UCSRB,RXEN);
 60c:	54 9a       	sbi	0x0a, 4	; 10
	set_bit__(UCSRC,UCSZ0);
 60e:	80 b5       	in	r24, 0x20	; 32
 610:	82 60       	ori	r24, 0x02	; 2
 612:	80 bd       	out	0x20, r24	; 32
	set_bit__(UCSRC,UCSZ1);
 614:	80 b5       	in	r24, 0x20	; 32
 616:	84 60       	ori	r24, 0x04	; 4
 618:	80 bd       	out	0x20, r24	; 32
 61a:	08 95       	ret

0000061c <UART_SEND_CHAR>:
}
void UART_SEND_CHAR(uint_8__ data){
	while ((get_bit__(UCSRA,UDRE))==0);
 61c:	5d 9b       	sbis	0x0b, 5	; 11
 61e:	fe cf       	rjmp	.-4      	; 0x61c <UART_SEND_CHAR>
	UDR=data;
 620:	8c b9       	out	0x0c, r24	; 12
 622:	08 95       	ret

00000624 <UART_SEND_STRING>:
}
void UART_SEND_STRING(int_8__ *str){
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	ec 01       	movw	r28, r24
	while(*str!='\0'){
 62a:	88 81       	ld	r24, Y
 62c:	88 23       	and	r24, r24
 62e:	31 f0       	breq	.+12     	; 0x63c <UART_SEND_STRING+0x18>
 630:	21 96       	adiw	r28, 0x01	; 1
		UART_SEND_CHAR(*str);
 632:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_SEND_CHAR>
void UART_SEND_CHAR(uint_8__ data){
	while ((get_bit__(UCSRA,UDRE))==0);
	UDR=data;
}
void UART_SEND_STRING(int_8__ *str){
	while(*str!='\0'){
 636:	89 91       	ld	r24, Y+
 638:	81 11       	cpse	r24, r1
 63a:	fb cf       	rjmp	.-10     	; 0x632 <UART_SEND_STRING+0xe>
		UART_SEND_CHAR(*str);
		str++;
	}
}
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <UART_RECIEVE>:
uint_8__ UART_RECIEVE(){
	while ((get_bit__(UCSRA,UDRE))==0);
 642:	5d 9b       	sbis	0x0b, 5	; 11
 644:	fe cf       	rjmp	.-4      	; 0x642 <UART_RECIEVE>
	return UDR;
 646:	8c b1       	in	r24, 0x0c	; 12
}
 648:	08 95       	ret

0000064a <__tablejump2__>:
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	05 90       	lpm	r0, Z+
 650:	f4 91       	lpm	r31, Z
 652:	e0 2d       	mov	r30, r0
 654:	09 94       	ijmp

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
